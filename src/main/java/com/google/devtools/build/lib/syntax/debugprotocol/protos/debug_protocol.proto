// Copyright 2017 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package debug_protocol;

option java_package = "com.google.devtools.build.lib.syntax.debugprotocol";
option java_outer_classname = "DebugProtos";

// A request sent by the debug client to the debug server.
message DebugRequest {

  // A number (intended to be sequentially generated by the client) that
  // identifies the request. The response sent by the server will contain the
  // same sequence number so that the client can synchronize its activity if
  // desired.
  int64 sequence_number = 1;

  // The payload describes the type of the request and its arguments, if any.
  oneof payload {
    ListThreadsRequest listThreads = 100;
    SetBreakpointsRequest setBreakpoints = 101;
    ContinueExecutionRequest continueExecution = 102;
    EvaluateRequest evaluate = 103;
  }
}

// A request to list the threads that are currently active running Skylark code.
message ListThreadsRequest {
}

// A request to update the breakpoints used by the debug server.
message SetBreakpointsRequest {

  // The breakpoints that describe where the debug server should pause
  // evaluation.
  repeated Breakpoint breakpoint = 1;
}

// A request to continue execution on a paused thread.
message ContinueExecutionRequest {

  // The identifier of the thread to continue.
  int64 thread_id = 1;
}

message EvaluateRequest {

  // The identifier of the thread in whose execution context the expression
  // should be evaluated.
  int64 thread_id = 1;

  // The Skylark expression to evaluate.
  string expression = 2;
}

// There are two kinds of events: "responses", which correspond to a
// DebugRequest sent by the client, and other asynchronous events that may be
// sent by the server to notify the client of activity in the Skylark code being
// debugged.
message DebugEvent {

  // If non-zero, this event is a response to a DebugRequest with the same
  // sequence number.
  int64 sequence_number = 1;

  // The payload describes the type of event and any additional information
  // about the event.
  oneof payload {
    Error error = 99;

    ListThreadsResponse listThreads = 100;
    SetBreakpointsResponse setBreakpoints = 101;
    ContinueExecutionResponse continueExecution = 102;
    EvaluateResponse evaluate = 103;

    ThreadStartedEvent threadStarted = 1000;
    ThreadEndedEvent threadEnded = 1001;
  }
}

// A response that indicates that an error occurred while handling a debugging
// request.
message Error {

  // A message describing the error that occurred.
  string message = 1;
}

// The response to a ListThreadsRequest.
message ListThreadsResponse {

  // The threads that are currently active running Skylark code.
  repeated Thread thread = 1;
}

// The response to a SetBreakpointsRequest.
message SetBreakpointsResponse {
}

// The response to a ContinueExecutionRequest.
message ContinueExecutionResponse {
}

// The response to an EvaluateRequest.
message EvaluateResponse {

  // The result of evaluating an expression.
  Value result = 1;
}

// An event indicating that a thread has begun executing Skylark code.
message ThreadStartedEvent {

  // The thread that began.
  Thread thread = 1;
}

// An event indicating that a thread that was executed Skylark code has ended.
message ThreadEndedEvent {

  // The thread that ended.
  Thread thread = 1;
}

// A location or condition where the debug server will pause execution.
message Breakpoint {

  oneof condition {
    // A breakpoint that is triggered when a particular line is reached.
    Location location = 1;
  }
}

// A location in Skylark source code.
message Location {

  // The path of the Skylark source file.
  string path = 1;

  // A line number in the file denoted by path.
  uint32 line_number = 2;
}

// Information about a thread that is running Skylark code.
message Thread {

  // The identifier of the thread.
  int64 id = 1;
}

// The debugger representation of a Skylark value.
message Value {

  // A label that describes this value at its location in a hierarchy.
  //
  // For example, in a stack frame the label would be the name of the variable
  // to which the value is bound. If this value is an element of a list, then
  // its value would be its subscript, such as "[4]".
  string label = 1;

  // A string description of the value.
  string description = 2;

  // Any child values associated with this value, such as its elements (for a
  // list or dictionary), its fields (for a struct), and so forth.
  repeated Value child = 3;
}
